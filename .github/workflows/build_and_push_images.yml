name: Build and Push Production Images

on:
  push:
    branches:
      - main
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: eneo-ai/eneo-backend
  FRONTEND_IMAGE_NAME: eneo-ai/eneo-frontend

jobs:
  build-and-push-production:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history including tags for version calculation
          
      - name: Fetch all tags
        run: git fetch --all --tags --force

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Determine version tag
      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION=${{ github.event.release.tag_name }}
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Get highest version tag (not most recent chronologically)
            LATEST_TAG=$(git tag --list 'v*' --sort=-v:refname | head -n 1 || echo "v0.0.0")
            # Extract version numbers
            VERSION_PARTS=(${LATEST_TAG//v/})
            VERSION_PARTS=(${VERSION_PARTS//./ })
            PATCH=$((${VERSION_PARTS[2]} + 1))
            VERSION="v${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"
          
      # Backend
      - name: Extract backend metadata
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.version.outputs.VERSION }}
            type=sha,prefix={{branch}}-,format=short
          
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          
      # Frontend
      - name: Extract frontend metadata
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.version.outputs.VERSION }}
            type=sha,prefix={{branch}}-,format=short
          
      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
      
      # Create git tag if building from main (not release)
      - name: Create git tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          # Check if tag already exists to make this idempotent
          if git rev-parse ${{ steps.version.outputs.VERSION }} >/dev/null 2>&1; then
            echo "Tag ${{ steps.version.outputs.VERSION }} already exists, skipping tag creation"
          else
            echo "Creating and pushing new tag ${{ steps.version.outputs.VERSION }}"
            git tag ${{ steps.version.outputs.VERSION }}
            git push origin ${{ steps.version.outputs.VERSION }}
          fi