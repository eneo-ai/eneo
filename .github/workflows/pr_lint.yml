name: Pull Request Checks

on:
  pull_request:
    branches:
      - main
      - develop
    types:
      - opened
      - edited
      - synchronize
      - reopened

permissions:
  pull-requests: read

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    name: Validate PR title and branch
    steps:
      - name: Check branch naming
        run: |
          BRANCH_NAME="${{ github.head_ref }}"

          # Skip branch naming check for long-lived branches
          if [[ "$BRANCH_NAME" == "develop" ]]; then
            echo "‚úÖ Branch 'develop' is a long-lived branch - skipping naming convention check"
            exit 0
          fi

          VALID_PREFIXES="^(feature|fix|hotfix|chore|docs|test|refactor|ci)/"

          if [[ ! "$BRANCH_NAME" =~ $VALID_PREFIXES ]]; then
            echo "‚ùå Branch name '$BRANCH_NAME' does not follow naming convention."
            echo "Branch names should start with: feature/, fix/, hotfix/, chore/, docs/, test/, refactor/, or ci/"
            exit 1
          fi

          echo "‚úÖ Branch name follows naming convention"

  frontend-checks:
    runs-on: ubuntu-latest
    name: Frontend basic checks
    defaults:
      run:
        working-directory: frontend
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.23
      - name: Install dependencies
        run: bun run setup:github
      - name: Run svelte-check
        run: bun run check || echo "Svelte check failed but continuing..."
      - name: Run eslint (non-blocking)
        run: bun run lint || echo "ESLint failed but continuing..."

  backend-checks:
    runs-on: ubuntu-latest
    name: Backend checks (Ruff)
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for changed files detection

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.22"
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.11

      - name: Get changed Python files
        id: changed-files
        run: |
          # Get changed Python files in backend directory
          CHANGED_FILES=$(git diff --name-only --diff-filter=AM origin/main...HEAD -- 'backend/**/*.py' | tr '\n' ' ')
          echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "Changed Python files: $CHANGED_FILES"
          if [ -z "$CHANGED_FILES" ]; then
            echo "No Python files changed in backend/"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: üö® Critical Issues Check (BLOCKING)
        if: steps.changed-files.outputs.skip == 'false'
        run: |
          cd backend
          uv run ruff check ${{ steps.changed-files.outputs.files }} --config pyproject.toml --output-format github
        # This step will FAIL the workflow for critical issues

      - name: üíÖ Style & Format Check (NON-BLOCKING)
        if: steps.changed-files.outputs.skip == 'false'
        run: |
          echo "Checking style issues in: ${{ steps.changed-files.outputs.files }}"
          cd backend
          uv run ruff check --config pyproject.toml --output-format github ${{ steps.changed-files.outputs.files }} || echo "‚ö†Ô∏è Style issues found (non-blocking)"
        continue-on-error: true

      - name: Skip message
        if: steps.changed-files.outputs.skip == 'true'
        run: echo "‚úÖ No Python files changed in backend/ - skipping ruff checks"
